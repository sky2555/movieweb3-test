import streamlit as st
import requests

# üîë API Key
API_KEY = "94145c1b57ad82308778c658f6da2a4e"
BASE_URL = "https://api.themoviedb.org/3"

# üé® CSS ‡∏ó‡∏≥‡πÉ‡∏´‡πâ UI ‡∏™‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö IMDB
st.markdown("""
    <style>
        .stApp {background-color: #000; color: white;}
        .movie-card {
            background: #1a1a1a;
            border-radius: 10px;
            padding: 10px;
            margin: 10px;
            text-align: center;
            box-shadow: 0px 0px 10px rgba(255,255,255,0.1);
        }
        .movie-title {font-size: 18px; font-weight: bold; color: #FFD700;}
        .rating {background: #FFD700; color: black; font-weight: bold;
                 padding: 3px 8px; border-radius: 5px; display: inline-block;}
        img {border-radius: 5px;}
        .back-btn {color: white; background: #FFD700; padding: 5px 10px; border-radius: 5px; text-decoration: none;}
    </style>
""", unsafe_allow_html=True)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
@st.cache_data
def get_genres():
    url = f"{BASE_URL}/genre/movie/list?api_key={API_KEY}&language=en-US"
    res = requests.get(url).json()
    return {g["name"]: g["id"] for g in res["genres"]}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
def get_movies(genre_id):
    url = f"{BASE_URL}/discover/movie?api_key={API_KEY}&with_genres={genre_id}&sort_by=popularity.desc"
    return requests.get(url).json()["results"]

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡∏±‡∏á + trailer
def get_movie_details(movie_id):
    details = requests.get(f"{BASE_URL}/movie/{movie_id}?api_key={API_KEY}&language=en-US").json()
    videos = requests.get(f"{BASE_URL}/movie/{movie_id}/videos?api_key={API_KEY}&language=en-US").json()
    trailer = next((v["key"] for v in videos["results"] if v["site"] == "YouTube" and v["type"] == "Trailer"), None)
    return details, trailer

# ‚úÖ ‡πÉ‡∏ä‡πâ session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
if "page" not in st.session_state:
    st.session_state.page = "home"
if "selected_movie" not in st.session_state:
    st.session_state.selected_movie = None

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
def go_home():
    st.session_state.page = "home"
    st.session_state.selected_movie = None

def show_movie(movie_id):
    st.session_state.page = "details"
    st.session_state.selected_movie = movie_id

# üé¨ ‡∏´‡∏ô‡πâ‡∏≤ Home
if st.session_state.page == "home":
    st.title("üé¨ Movie Hub ‚Äì IMDB Style")
    st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå IMDB ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°")

    # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    genres = get_genres()
    genre_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á", list(genres.keys()))
    movies = get_movies(genres[genre_name])

    # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    search = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ")
    if search:
        movies = [m for m in movies if search.lower() in m["title"].lower()]

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏ö‡∏ö Grid
    cols = st.columns(3)
    for i, movie in enumerate(movies):
        poster = f"https://image.tmdb.org/t/p/w500{movie.get('poster_path')}" if movie.get('poster_path') else "https://via.placeholder.com/300x450"
        with cols[i % 3]:
            if st.button(movie["title"], key=f"btn_{movie['id']}"):
                show_movie(movie["id"])
            st.markdown(f"""
                <div class="movie-card">
                    <img src="{poster}" width="100%">
                    <div class="movie-title">{movie['title']}</div>
                    <div class="rating">‚≠ê {movie['vote_average']}</div>
                </div>
            """, unsafe_allow_html=True)

# üé¨ ‡∏´‡∏ô‡πâ‡∏≤ Details
elif st.session_state.page == "details":
    movie_id = st.session_state.selected_movie
    details, trailer = get_movie_details(movie_id)

    st.markdown(f"<a class='back-btn' href='#' onclick='window.location.reload()'>‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö</a>", unsafe_allow_html=True)
    st.header(f"üé• {details['title']}")
    st.image(f"https://image.tmdb.org/t/p/w500{details['poster_path']}" if details.get("poster_path") else "https://via.placeholder.com/500x750")

    st.subheader("üìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠")
    st.write(details["overview"])

    st.write(f"‚≠ê **‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô**: {details['vote_average']}")
    st.write(f"üìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏â‡∏≤‡∏¢**: {details['release_date']}")
    st.write(f"üé≠ **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó**: {', '.join([g['name'] for g in details['genres']])}")

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Trailer
    if trailer:
        st.subheader("üé¨ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á")
        st.video(f"https://www.youtube.co
